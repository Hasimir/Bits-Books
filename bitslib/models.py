#This file was modified after being generated by sqlautocode to work with
#Flask-SQLAlchemy

from datetime import datetime
from bitslib.database import db
from bitslib.utils import generate_encrypted_password

#Alias a function
now = datetime.now

#Setup helper tables

Book_Author = db.Table(u'Book_Author',
    db.Column(u'id', db.Integer(), primary_key=True, nullable=False),
    db.Column(u'book_id', db.Integer(), db.ForeignKey('Book.id')),
    db.Column(u'author_id', db.Integer(), db.ForeignKey('Author.id')),
    db.Column(u'date_created', db.DateTime(), nullable=False),
    db.Column(u'date_modified', db.DateTime(), nullable=False),
)

Book_Category = db.Table(u'Book_Category',
    db.Column(u'id', db.Integer(), primary_key=True, nullable=False),
    db.Column(u'book_id', db.Integer(), db.ForeignKey('Book.id')),
    db.Column(u'category_id', db.Integer(), db.ForeignKey('Category.id')),
    db.Column(u'date_created', db.DateTime(), nullable=False),
    db.Column(u'date_modified', db.DateTime(), nullable=False),
)


class Admin(db.Model):
    __tablename__ = 'Admin'

    __table_args__ = {}

    #column definitions
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    level = db.Column(u'level', db.String(length=8), nullable=False)
    user_id = db.Column(u'user_id', db.Integer(), db.ForeignKey('User.id'))

    #db.relationship definitions
    User = db.relationship('User', primaryjoin='Admin.user_id==User.id',
            backref=db.backref('User', lazy='joined'))


class Author(db.Model):
    __tablename__ = 'Author'

    __table_args__ = {}

    #column definitions
    birth_date = db.Column(u'birth_date', db.Date())
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    name = db.Column(u'name', db.String(length=32), nullable=False)

    #db.relationship definitions
    Books = db.relationship('Book', secondary=Book_Author)


class Billing(db.Model):
    __tablename__ = 'Billing'

    __table_args__ = {}

    #column definitions
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    type = db.Column(u'type', db.String(length=12))
    user_id = db.Column(u'user_id', db.Integer(), db.ForeignKey('User.id'))

    #db.relationship definitions
    User = db.relationship('User', primaryjoin='Billing.user_id==User.id')


class Book(db.Model):
    __tablename__ = 'Book'

    __table_args__ = {}

    #column definitions
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    isbn = db.Column(u'isbn', db.Integer(), nullable=False, unique=True)
    price = db.Column(u'price', db.DECIMAL(precision=7, scale=2),
            nullable=False)
    publisher_id = db.Column(u'publisher_id', db.Integer(),
            db.ForeignKey('Publisher.id'))
    title = db.Column(u'title', db.String(length=64), nullable=False)

    #db.relationship definitions
    Publisher = db.relationship('Publisher',
            primaryjoin='Book.publisher_id==Publisher.id')
    Authors = db.relationship('Author', secondary=Book_Author,
            backref=db.backref('Book'))
    Categories = db.relationship('Category', secondary=Book_Category,
            backref=db.backref('Book'))


class Cart(db.Model):
    __tablename__ = 'Cart'

    __table_args__ = {}

    #column definitions
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    user_id = db.Column(u'user_id', db.Integer(), db.ForeignKey('User.id'))
    status = db.Column(u'status', db.String(length=10), nullable=False)


class CartItem(db.Model):
    __tablename__ = 'CartItem'

    __table_args__ = {}

    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    cart_id = db.Column(u'cart_id', db.Integer(), db.ForeignKey('Cart.id'))
    book_id = db.Column(u'book_id', db.Integer(), db.ForeignKey('Book.id'))
    quantity = db.Column(u'quantity', db.Integer())
    status = db.Column(u'status', db.String(length=10), nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)

    #db.relationship definitions
    Book = db.relationship('Book', primaryjoin='CartItem.book_id==Book.id')
    Cart = db.relationship('Cart', primaryjoin='CartItem.cart_id==Cart.id')


class Category(db.Model):
    __tablename__ = 'Category'

    __table_args__ = {}

    #column definitions
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    name = db.Column(u'name', db.String(length=32), nullable=False,
            unique=True)

    #db.relationship definitions
    Books = db.relationship('Book', secondary=Book_Category)


class Creditcard(db.Model):
    __tablename__ = 'Creditcard'

    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    address_id = db.Column(u'address_id', db.Integer(),
            db.ForeignKey('UserAddress.id'))
    billing_id = db.Column(u'billing_id', db.Integer(),
            db.ForeignKey('Billing.id'))
    name = db.Column(u'name', db.String(length=64), nullable=False)
    cc_number = db.Column(u'cc_number', db.Integer(), nullable=False)
    sec_number = db.Column(u'sec_number', db.Integer(), nullable=False)
    exp_date = db.Column(u'exp_date', db.Date(), nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)

    #db.relationship definitions
    UserAddress = db.relationship('UserAddress',
            primaryjoin='Creditcard.address_id==UserAddress.id')
    Billing = db.relationship('Billing',
            primaryjoin='Creditcard.billing_id==Billing.id')


class Giftcard(db.Model):
    __tablename__ = 'Giftcard'

    __table_args__ = {}

    #column definitions
    billing_id = db.Column(u'billing_id', db.Integer(),
            db.ForeignKey('Billing.id'))
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    number = db.Column(u'number', db.String(length=24), nullable=False,
            unique=True)
    pin = db.Column(u'pin', db.Integer(), nullable=False)

    #db.relationship definitions
    Billing = db.relationship('Billing',
            primaryjoin='Giftcard.billing_id==Billing.id')


class Inventory(db.Model):
    __tablename__ = 'Inventory'

    __table_args__ = {}

    #column definitions
    book_id = db.Column(u'book_id', db.Integer(), db.ForeignKey('Book.id'))
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    quantity = db.Column(u'quantity', db.Integer(), nullable=False)
    status = db.Column(u'status', db.String(length=10), nullable=False)

    #db.relationship definitions
    Book = db.relationship('Book', primaryjoin='Inventory.book_id==Book.id')


class InventoryOrder(db.Model):
    __tablename__ = 'InventoryOrder'

    __table_args__ = {}

    #column definitions
    cost = db.Column(u'cost', db.DECIMAL(precision=7, scale=2), nullable=False)
    cur_quantity = db.Column(u'cur_quantity', db.Integer(), nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    inventory_id = db.Column(u'inventory_id', db.Integer(),
            db.ForeignKey('Inventory.id'))
    orig_quantity = db.Column(u'orig_quantity', db.Integer(), nullable=False)

    #db.relationship definitions
    Inventory = db.relationship('Inventory',
            primaryjoin='InventoryOrder.inventory_id==Inventory.id')


class Order(db.Model):
    __tablename__ = 'Order'

    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    user_id = db.Column(u'user_id', db.Integer(), db.ForeignKey('User.id'))
    cart_id = db.Column(u'cart_id', db.Integer(), db.ForeignKey('Cart.id'))
    shipping = db.Column(u'shipping', db.DECIMAL(precision=7, scale=2),
            nullable=False)
    tax = db.Column(u'tax', db.DECIMAL(precision=7, scale=2), nullable=False)
    status = db.Column(u'status', db.String(length=10), nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)

    #db.relationship definitions
    User = db.relationship('User', primaryjoin='Order.user_id==User.id')
    Cart = db.relationship('Cart', primaryjoin='Order.cart_id==Cart.id')


class OrderItem(db.Model):
    __tablename__ = 'OrderItem'

    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    order_id = db.Column(u'order_id', db.Integer(), db.ForeignKey('Order.id'))
    book_id = db.Column(u'book_id', db.Integer(), db.ForeignKey('Book.id'))
    quantity = db.Column(u'quantity', db.Integer())
    cost = db.Column(u'cost', db.DECIMAL(precision=7, scale=2), nullable=False)
    price = db.Column(u'price', db.DECIMAL(precision=7, scale=2),
            nullable=False)
    status = db.Column(u'status', db.String(length=10), nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)

    #db.relationship definitions
    Order = db.relationship('Order',
            primaryjoin='OrderItem.order_id==Order.id')
    Book = db.relationship('Book', primaryjoin='OrderItem.book_id==Book.id')


class OrderPayment(db.Model):
    __tablename__ = 'OrderPayment'

    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    order_id = db.Column(u'order_id', db.Integer(), db.ForeignKey('Order.id'))
    billing_id = db.Column(u'billing_id', db.Integer(),
            db.ForeignKey('Billing.id'))
    price = db.Column(u'price', db.DECIMAL(precision=7, scale=2),
            nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)

    #db.relationship definitions
    Order = db.relationship('Order',
            primaryjoin='OrderPayment.order_id==Order.id')
    Billing = db.relationship('Billing',
            primaryjoin='OrderPayment.billing_id==Billing.id')


class Publisher(db.Model):
    __tablename__ = 'Publisher'

    __table_args__ = {}

    #column definitions
    city = db.Column(u'city', db.String(length=20))
    country = db.Column(u'country', db.String(length=20))
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    established_date = db.Column(u'established_date', db.Date())
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    name = db.Column(u'name', db.String(length=32), nullable=False)
    state = db.Column(u'state', db.String(length=20))


class User(db.Model):
    __tablename__ = 'User'

    __table_args__ = {}

    #column definitions
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    email = db.Column(u'email', db.String(length=64), nullable=False,
            unique=True)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    name = db.Column(u'name', db.String(length=64))
    password = db.Column(u'password', db.String(length=64), nullable=False)
    phone = db.Column(u'phone', db.Integer())
    username = db.Column(u'username', db.String(length=32), nullable=False,
            unique=True)
    authenticated = False

    def __init__(self, email, username, password, name=None, phone=None):
        self.name = name
        self.username = username
        self.email = email
        self.password = generate_encrypted_password(password)
        self.phone = phone
        current_time = now().strftime("%Y-%m-%d %H:%M")
        self.date_created = current_time
        self.date_modified = current_time
        self.authenticated = False

    def __repr__(self):
        return "<User id: {id}, username: {usn}, name: {name},>".format(
                id=self.id, name=self.name, usn=self.username,
                auth=self.authenticated)

    #Methods for Flask-Login

    def get_id(self):
        return unicode(self.id)

    def is_anonymous(self):
        return not isinstance(self.id, long)

    def is_authenticated(self):
        return self.authenticated

    def is_active(self):
        return self.is_authenticated()

    def is_admin(self):
        #print User.Admin
        return False

    #db.relationship definitions
    Carts = db.relationship('Cart', primaryjoin='User.id==Cart.user_id',
            backref=db.backref('User'))


class UserAddress(db.Model):
    __tablename__ = 'UserAddress'

    __table_args__ = {}

    #column definitions
    address1 = db.Column(u'address1', db.String(length=32), nullable=False)
    address2 = db.Column(u'address2', db.String(length=32))
    city = db.Column(u'city', db.String(length=20), nullable=False)
    country = db.Column(u'country', db.String(length=20), nullable=False)
    date_created = db.Column(u'date_created', db.DateTime(), nullable=False)
    date_modified = db.Column(u'date_modified', db.DateTime(), nullable=False)
    id = db.Column(u'id', db.Integer(), primary_key=True, nullable=False)
    name = db.Column(u'name', db.String(length=64), nullable=False)
    state = db.Column(u'state', db.String(length=20))
    status = db.Column(u'status', db.String(length=10), nullable=False)
    user_id = db.Column(u'user_id', db.Integer(), db.ForeignKey('User.id'))
    zip = db.Column(u'zip', db.Integer())

    def __init__(self, user_id, name, adr1, adr2, city, state, zip, country):
        self.user_id = user_id
        self.name = name
        self.address1 = adr1
        self.address2 = adr2
        self.city = city
        self.state = state
        self.zip = zip
        self.country = country
        current_time = now().strftime("%Y-%m-%d %H:%M")
        self.date_created = current_time
        self.date_modified = current_time

    #db.relationship definitions
    User = db.relationship('User', primaryjoin='UserAddress.user_id==User.id',
            backref=db.backref('UserAddress'))
